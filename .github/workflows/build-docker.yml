name: Create and publish multi-arch Docker images

on:
  push:
    branches:
      - 'main'
      - 'fix/**'
      - 'dev'
      - 'test-**'
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: tutujaru/ticketz-backend  # Changed to your personal namespace
  IMAGE_FRONTEND: tutujaru/ticketz-frontend  # Changed to your personal namespace

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for attestations

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git history

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Get git info and setup version files
        run: |
          cat <<EOT > backend/src/gitinfo.ts
          export const GitInfo = {
              commitHash: "$(git rev-parse --short HEAD)",
              commitTimestamp: "$(date -u -d "$(git log -1 --format=%cI)" +'%Y-%m-%dT%H:%M:%SZ')",
              branchName: "$(git rev-parse --abbrev-ref HEAD)",
              tagName: "$(git describe --tags --abbrev=0 2>/dev/null || echo 'none')",
              buildTimestamp: "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          };
          EOT
          cat <<EOT > frontend/public/gitinfo.json
          {
              "commitHash": "$(git rev-parse --short HEAD)",
              "commitTimestamp": "$(date -u -d "$(git log -1 --format=%cI)" +'%Y-%m-%dT%H:%M:%SZ')",
              "branchName": "$(git rev-parse --abbrev-ref HEAD)",
              "tagName": "$(git describe --tags --abbrev=0 2>/dev/null || echo 'none')",
              "buildTimestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata for Backend
        id: metabackend
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BACKEND }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
          labels: |
            org.opencontainers.image.title=ticketz-backend
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Docker metadata for Frontend
        id: metafrontend
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
          labels: |
            org.opencontainers.image.title=ticketz-frontend
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.metabackend.outputs.tags }}
          labels: ${{ steps.metabackend.outputs.labels }}
          build-args: |
            TICKETZ_REGISTRY_URL=${{ secrets.TICKETZ_REGISTRY_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.metafrontend.outputs.tags }}
          labels: ${{ steps.metafrontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
